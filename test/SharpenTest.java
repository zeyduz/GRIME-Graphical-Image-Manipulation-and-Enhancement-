import org.junit.Test;

import image.Image;
import image.PPMImage;
import image.Pixel;
import image.RGBAPixel;
import imageprocessing.model.imagecommand.ImageCommand;
import imageprocessing.model.imagecommand.Sharpen;
import imageprocessing.model.ImageProcessingApplicationModel;
import imageprocessing.model.ImageProcessingApplicationModelImpl;

import static org.junit.Assert.assertEquals;

/**
 * Sharpen command test.
 */
public class SharpenTest {


  ImageProcessingApplicationModel model;

  private void setupBlur() {
    this.model = new ImageProcessingApplicationModelImpl();
    this.model.addImage(new PPMImage("src/images/example1.ppm"), "example1");
    this.model.addImage(new PPMImage("src/images/example2.ppm"), "example2");
  }

  @Test
  public void testExample1Sharpen() {
    setupBlur();
    // Create and Execute the Command
    ImageCommand cmd = new Sharpen("example1", "example1-new");
    cmd.execute(model);

    // Test that the Command Added the New Image to the Model With The Correct Properties
    // by comparing it to an expected image

    // Actual
    Image greyscale = model.getImageCopy("example1-new");

    // Expected
    Pixel[][] expected = new RGBAPixel[2][3];
    expected[0][0] = new RGBAPixel(255, 125, 0, 86, 255);
    expected[0][1] = new RGBAPixel(255, 255, 5, 94, 255);
    expected[0][2] = new RGBAPixel(255, 37, 5, 0, 255);
    expected[1][0] = new RGBAPixel(255, 255, 0, 255, 255);
    expected[1][1] = new RGBAPixel(255, 133, 5, 169, 255);
    expected[1][2] = new RGBAPixel(255, 52, 20, 13, 255);

    for (int i = 0; i < 2; i++) {
      for (int j = 0; j < 3; j++) {
        assertEquals(expected[i][j], greyscale.getPixel(i, j));
      }
    }
  }

  @Test
  public void testExample2Sharpen() {
    setupBlur();
    // Create and Execute the Command
    ImageCommand cmd = new Sharpen("example2", "example2-new");
    cmd.execute(model);

    // Test that the Command Added the New Image to the Model With The Correct Properties
    // by comparing it to an expected image

    // Actual
    Image greyscale = model.getImageCopy("example2-new");

    // Expected
    Pixel[][] expected = new RGBAPixel[3][2];
    expected[0][0] = new RGBAPixel(255, 248, 255, 255, 255);
    expected[0][1] = new RGBAPixel(255, 57, 255, 108, 255);
    expected[1][0] = new RGBAPixel(255, 228, 255, 255, 255);
    expected[1][1] = new RGBAPixel(255, 153, 255, 255, 255);
    expected[2][0] = new RGBAPixel(255, 248, 25, 255, 255);
    expected[2][1] = new RGBAPixel(255, 57, 25, 221, 255);

    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 2; j++) {
        assertEquals(expected[i][j], greyscale.getPixel(i, j));
      }
    }
  }
}
